import os
import sys
import menu_config
from SCons.Script import *
import subprocess
import platform
import uuid

TOOL_ROOT="../tool/scons-tool"

sys.path = sys.path + [os.path.join(TOOL_ROOT, '')]
try:
    from building import *
except:
    print('Cannot found Scons tool root directory, please check TOOL_ROOT')
    exit(-1)

TARGET = 'gui.' + 'exe'

#env = Environment(tools = ['mingw'],
#    AS = menu_config.AS, ASFLAGS = menu_config.AFLAGS,
#    CC = menu_config.CC, CCFLAGS = menu_config.CFLAGS,
#    AR = menu_config.AR, ARFLAGS = '-rc',
#    CXX = menu_config.CXX, CXXFLAGS = menu_config.CXXFLAGS,
#    LINK = menu_config.LINK, LINKFLAGS = menu_config.LFLAGS)

env = Environment(tools = ['mingw'],
                  CC=menu_config.CC, CFLAGS = menu_config.CFLAGS,
                  CXX = menu_config.CXX, CXXFLAGS = menu_config.CXXFLAGS,
                  LINKFLAGS = menu_config.LFLAGS)

#env.PrependENVPath('PATH', menu_config.EXEC_PATH)
env.Append(LIBS = ['mingw32'])
env.Append(LIBS = ['opengl32'])
# env.Append(LIBS = ['gdi32'])




RTK_GUI_ENGINE = os.path.abspath('./../realgui/')
GUI_EXAMPLE = os.path.abspath('./../example/')

PLATFORM = menu_config.PLATFORM

Export('PLATFORM')
Export('TOOL_ROOT')
Export('RTK_GUI_ENGINE')



print("CC: ", env['CC'])
print("CFLAGS: ", env['CFLAGS'])
print("CXXFLAGS: ", env['CXXFLAGS'])
print("LINKFLAGS: ", env['LINKFLAGS'])

print('TOOL ROOT = ' + TOOL_ROOT)
print('RTK GUI ENGINE ROOT = ' + RTK_GUI_ENGINE)


# prepare building environment
objs = PrepareBuilding(env, TOOL_ROOT, has_libcpu=False)

# set spawn: save & load long param as temp file
def ourspawn(sh, escape, cmd, args, e):
    filename = str(uuid.uuid4())
    newargs = ' '.join(args[1:])
    cmdline = cmd + " " + newargs
    if (len(cmdline) > 16 * 1024):
        f = open(filename, 'w')
        f.write(' '.join(args[1:]).replace('\\', '/'))
        f.close()
        # exec
        cmdline = cmd + " @" + filename
    proc = subprocess.Popen(cmdline, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
        stderr=subprocess.PIPE, shell = False, env = e)
    data, err = proc.communicate()
    rv = proc.wait()
    def res_output(_output, _s):
        if len(_s):
            if isinstance(_s, str):
                _output(_s)
            elif isinstance(_s, bytes):
                _output(str(_s, 'UTF-8'))
            else:
                _output(str(_s))
    res_output(sys.stderr.write, err)
    res_output(sys.stdout.write, data)
    if os.path.isfile(filename):
        os.remove(filename)
    return rv
if platform.system() == 'Windows':
    env['SPAWN'] = ourspawn

# include app
objs.extend(SConscript(os.path.join(RTK_GUI_ENGINE, 'SConscript')))
objs.extend(SConscript(os.path.join(GUI_EXAMPLE, 'SConscript')))

# bsp_vdir = 'build'

# make a building
DoBuilding(TARGET, objs)
